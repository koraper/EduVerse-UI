{
  "courseTitle": "LogiCore Tech 신입 개발자 과정",
  "language": "JavaScript",
  "languageVersion": "ES6+",
  "installationGuide": {
    "windows": "Windows 환경에서 Node.js 설치: https://nodejs.org/ → LTS 버전 다운로드 → 인스톨러 실행 → npm 함께 설치 확인",
    "macos": "macOS 환경에서 Node.js 설치: Homebrew 사용 (brew install node) 또는 https://nodejs.org/ 에서 인스톨러 다운로드",
    "linux": "Linux 환경에서 Node.js 설치: sudo apt-get install nodejs npm (Ubuntu/Debian) 또는 각 배포판의 패키지 매니저 사용"
  },
  "weeks": [
    {
      "week": 1,
      "title": "신입사원 온보딩 및 JavaScript 개발 환경 구축",
      "cycles": [
        {
          "title": "Node.js 및 npm 설치 확인",
          "syntax_key": "installation",
          "filename": "check_node_version.js",
          "starterCode": "// Node.js 설치를 확인하기 위한 스크립트입니다.\n// 아래 터미널에서 'node check_node_version.js' 명령어를 실행하세요.\n\nconsole.log('Node.js 설치 확인 완료!');\nconsole.log('설치된 Node.js 버전:', process.version);\nconsole.log('npm 버전:', process.env.npm_version || 'npm --version으로 확인하세요');",
          "testCode": "const version = process.version;\nconst majorVersion = parseInt(version.split('.')[0].substring(1));\nif (majorVersion < 14) {\n  throw new Error('Node.js 14 이상 버전이 필요합니다.');\n}",
          "expectedPrintOutput": "Node.js 설치 확인 완료!",
          "task": {
            "character": "alex",
            "subtitle": "팀장 환영사",
            "title": "LogiCore Tech 웹 개발팀에 오신 것을 환영합니다!",
            "content": "OOO님, LogiCore Tech의 웹 개발팀에 입사해주셔서 감사합니다! 우리는 <span class='font-bold text-yellow-300'>JavaScript와 Node.js</span>를 사용하여 현대적이고 확장 가능한 웹 애플리케이션을 만들고 있습니다. 첫 번째 업무는 <span class='font-bold text-yellow-300'>Node.js와 npm을 설치</span>하여 개발 준비를 하는 것입니다. JavaScript는 웹 브라우저뿐만 아니라 백엔드 서버에서도 실행될 수 있습니다!"
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 OJT",
            "title": "JavaScript 개발 환경 세팅",
            "content": "반갑습니다, 선배 세나예요! JavaScript로 개발하려면 Node.js가 필수예요. Node.js는 JavaScript 런타임으로, 브라우저 밖에서도 JavaScript를 실행할 수 있게 해줍니다. <span class='font-bold text-teal-300'>npm(Node Package Manager)</span>은 Node.js와 함께 자동으로 설치되는데, 이걸로 다른 사람이 만든 패키지(라이브러리)를 쉽게 설치하고 관리할 수 있어요. 나중에 정말 유용하게 쓸 거니까 기억해두세요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 강의: JavaScript와 Node.js의 이해",
            "keyTakeaway": "JavaScript = 프로그래밍 언어, Node.js = JavaScript 실행 환경, npm = 패키지 관리자",
            "sandboxCode": null,
            "sections": [
              {
                "heading": "JavaScript의 역사",
                "text": "JavaScript는 1995년 Netscape Navigator에서 처음 개발되었으며, 원래는 브라우저에서만 실행되는 언어였습니다. 그러나 2009년 Ryan Dahl이 Node.js를 만들면서 JavaScript를 서버 사이드에서도 사용할 수 있게 되었습니다."
              },
              {
                "heading": "Node.js의 역할",
                "text": "Node.js는 Chrome의 V8 엔진을 사용하여 JavaScript를 매우 빠르게 실행합니다. 비동기 이벤트 기반 아키텍처로 인해 높은 동시성을 처리할 수 있어, 대규모 네트워크 애플리케이션을 만들기에 적합합니다.",
                "code": "// Node.js에서 간단한 서버 만들기 예시\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n  res.writeHead(200);\n  res.end('Hello from Node.js!');\n});\nserver.listen(3000);"
              },
              {
                "heading": "npm의 생태계",
                "text": "npm은 세계 최대의 패키지 저장소로, 수백만 개의 오픈소스 라이브러리를 호스팅합니다. 'package.json' 파일을 통해 프로젝트의 의존성을 관리하고, 다른 사람과 쉽게 공유할 수 있습니다.",
                "code": "// package.json 예시\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"express\": \"^4.18.0\"\n  }\n}"
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "완벽합니다!",
              "content": "<span class='font-bold text-green-300'>Node.js와 npm이 정상적으로 설치되었습니다.</span> 이제 OOO님은 JavaScript 백엔드 개발을 시작할 준비가 완료되었어요. 다음 단계로 진행하죠!"
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "Node.js 버전 확인이 필요합니다",
              "content": "테스트에서 실패했네요. {{ERROR_MESSAGE}} Node.js 14 이상 버전이 필요한데, 더 낮은 버전이 설치되어 있는 것 같습니다. Node.js 공식 사이트에서 최신 LTS 버전을 다시 설치해주세요."
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "node 명령어를 찾을 수 없습니다",
              "content": "터미널에서 'node' 명령어를 인식하지 못하고 있네요. Node.js 설치가 완료되지 않았거나, 환경 변수가 제대로 설정되지 않았을 가능성이 있습니다. 설치 가이드를 다시 따라해보세요!"
            }
          }
        },
        {
          "title": "VS Code에서 Node.js 프로젝트 시작",
          "syntax_key": "project_setup",
          "filename": "app.js",
          "starterCode": "// VS Code에서 Node.js 프로젝트를 준비하는 파일입니다.\n// 다음 사이클에서 이 파일을 수정하여 첫 JavaScript 코드를 작성하게 됩니다.\n\nconsole.log('VS Code 준비 완료! JavaScript 개발을 시작합시다.');",
          "testCode": "const fs = require('fs');\nconst packageJsonExists = fs.existsSync('package.json');\nif (!packageJsonExists) {\n  throw new Error('package.json 파일이 필요합니다. npm init 명령어를 실행해보세요.');\n}",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "Node.js 프로젝트 초기화",
            "content": "이제 우리의 첫 번째 JavaScript 프로젝트를 시작합시다. <span class='font-bold text-yellow-300'>터미널에서 'npm init' 명령어를 실행하여 package.json 파일을 생성</span>해주세요. 이 파일은 프로젝트의 설정과 의존성을 관리하는 매우 중요한 파일입니다."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "npm init으로 프로젝트 시작하기",
            "content": "VS Code의 터미널에서 'npm init' 또는 'npm init -y'를 실행하면 package.json이 생성돼요. '-y' 옵션을 사용하면 기본값으로 바로 생성되니까 편하답니다. <span class='font-bold text-teal-300'>package.json은 프로젝트의 메타데이터와 의존 라이브러리 목록</span>을 관리하는 아주 중요한 파일이에요."
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 강의: package.json의 이해",
            "keyTakeaway": "package.json은 Node.js 프로젝트의 설정 파일로, 프로젝트 정보와 의존성을 관리합니다.",
            "sections": [
              {
                "heading": "package.json의 구조",
                "text": "package.json은 JSON 형식의 파일로, 프로젝트 이름, 버전, 설명, 엔트리 포인트, 스크립트, 의존성 등을 정의합니다.",
                "code": "{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"LogiCore Tech 프로젝트\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}"
              },
              {
                "heading": "npm 스크립트",
                "text": "'scripts' 필드에서 자주 사용하는 명령어를 등록할 수 있습니다. 예를 들어 'npm start' 하면 'node app.js'가 실행됩니다.",
                "code": "\"scripts\": {\n  \"start\": \"node app.js\",\n  \"dev\": \"nodemon app.js\",\n  \"test\": \"jest\"\n}"
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "프로젝트 구조 완성!",
              "content": "<span class='font-bold text-green-300'>package.json이 성공적으로 생성되었습니다!</span> 이제 우리의 Node.js 프로젝트 기초가 완성되었어요. 다음 주에서 본격적으로 JavaScript 문법을 배워봅시다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "package.json이 없습니다",
              "content": "프로젝트 폴더에 package.json 파일이 없네요. VS Code 터미널을 열고 현재 폴더에서 'npm init' 또는 'npm init -y' 명령어를 실행해주세요."
            }
          }
        }
      ]
    },
    {
      "week": 2,
      "title": "JavaScript 기본 문법 - 변수와 데이터 타입",
      "cycles": [
        {
          "title": "변수와 const/let/var 선언",
          "syntax_key": "variables",
          "filename": "variables.js",
          "starterCode": "// TODO: 아래에 const, let, var를 각각 한 번씩 사용해 변수를 선언하고 초기값을 할당해보세요.\n// 예: const myConstant = 10;\n\n",
          "testCode": "// 이 코드는 자동으로 실행되어 테스트됩니다.\nconst output = require('child_process').execSync('node variables.js', {encoding: 'utf-8'});\nif (output.includes('const') && output.includes('let') && output.includes('var')) {\n  console.log('변수 선언이 성공적으로 작성되었습니다!');\n} else {\n  throw new Error('const, let, var 중 일부가 누락되었습니다.');\n}",
          "expectedPrintOutput": "변수 선언이 성공적으로 작성되었습니다!",
          "task": {
            "character": "alex",
            "subtitle": "팀장 업무 지시",
            "title": "JavaScript 변수 선언 방식 익히기",
            "content": "이제 JavaScript의 기본을 배워봅시다. JavaScript에서 변수를 선언하는 방법은 세 가지가 있어요: <span class='font-bold text-yellow-300'>const(상수), let(블록 스코프), var(함수 스코프)</span>. 이 세 가지 방식의 차이를 이해하고 각각 사용해보세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "const vs let vs var",
            "content": "요즘 JavaScript 개발자들은 대부분 'const'를 기본으로 사용하고, 꼭 필요할 때만 'let'을 써요. <span class='font-bold text-teal-300'>const는 재할당이 불가능하니까 실수를 줄일 수 있거든요.</span> 반면 var는 예측하기 어려운 동작이 있어서 요즘엔 잘 안 씁니다. 저도 처음에 const, let, var를 구분하는 데 시간이 걸렸는데, 자주 쓰다 보면 자연스럽게 체화돼요."
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 강의: 변수의 스코프와 호이스팅",
            "keyTakeaway": "const는 재할당 불가, let은 블록 스코프, var는 함수 스코프를 가집니다.",
            "sections": [
              {
                "heading": "const - 상수",
                "text": "const로 선언한 변수는 재할당이 불가능합니다. 객체나 배열은 내용을 수정할 수 있지만, 변수 자체를 다른 값으로 바꿀 수는 없습니다.",
                "code": "const PI = 3.14159;\n// PI = 3.14; // 에러! 재할당 불가\n\nconst person = { name: 'Alice' };\nperson.name = 'Bob'; // OK - 객체 내용 수정\n// person = {}; // 에러! 변수 자체 재할당 불가"
              },
              {
                "heading": "let - 블록 스코프",
                "text": "let은 재할당이 가능하지만, 블록 스코프를 가집니다. 이는 if, for, while 등의 블록 내에서만 유효함을 의미합니다.",
                "code": "let count = 0;\ncount = 1; // OK - 재할당 가능\n\nif (true) {\n  let blockVar = 'only in block';\n  console.log(blockVar); // 출력: 'only in block'\n}\nconsole.log(blockVar); // 에러 - blockVar는 블록 밖에서 접근 불가"
              },
              {
                "heading": "var - 함수 스코프 (권장하지 않음)",
                "text": "var는 함수 스코프를 가지므로 블록을 무시합니다. 이는 예측하기 어려운 버그를 만들 수 있어서 현대 JavaScript에서는 권장되지 않습니다.",
                "code": "if (true) {\n  var funcVar = 'visible outside';\n}\nconsole.log(funcVar); // 출력: 'visible outside' - var는 블록을 무시!"
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "변수 선언 성공!",
              "content": "<span class='font-bold text-green-300'>const, let, var를 모두 성공적으로 작성했습니다!</span> 이제 JavaScript 변수의 기초를 이해했어요. 다음은 데이터 타입에 대해 배워봅시다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "선언이 누락되었습니다",
              "content": "아직 const, let, var 중 일부가 작성되지 않았네요. {{ERROR_MESSAGE}} 각각을 한 번씩 작성해서 차이를 느껴보세요!"
            }
          }
        },
        {
          "title": "기본 데이터 타입 - 문자열, 숫자, 불린",
          "syntax_key": "data_types",
          "filename": "data_types.js",
          "starterCode": "// TODO: 다음 변수들을 선언하고 올바른 데이터 타입으로 할당하세요.\n// 1. name: 'LogiCore'라는 문자열\n// 2. version: 1.0라는 숫자\n// 3. isActive: true라는 불린값\n\n",
          "testCode": "const name = 'LogiCore';\nconst version = 1.0;\nconst isActive = true;\n\nif (typeof name !== 'string') throw new Error('name은 문자열이어야 합니다.');\nif (typeof version !== 'number') throw new Error('version은 숫자여야 합니다.');\nif (typeof isActive !== 'boolean') throw new Error('isActive는 불린이어야 합니다.');",
          "task": {
            "character": "alex",
            "subtitle": "팀장 업무 지시",
            "title": "JavaScript 데이터 타입 이해하기",
            "content": "모든 프로그래밍 언어는 다양한 데이터 타입을 지원합니다. JavaScript의 기본 데이터 타입인 <span class='font-bold text-yellow-300'>문자열(String), 숫자(Number), 불린(Boolean)</span>을 이해하고 각각 올바른 타입으로 변수를 할당해보세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "JavaScript의 동적 타입",
            "content": "JavaScript는 동적 타입 언어라서, 변수 선언 시 타입을 명시하지 않아도 돼요. <span class='font-bold text-teal-300'>typeof 연산자를 사용하면 변수의 타입을 확인할 수 있습니다.</span> 나중에 TypeScript를 배우면 더 엄격한 타입 체크가 가능해져요."
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 강의: JavaScript의 데이터 타입",
            "keyTakeaway": "JavaScript의 기본 타입은 문자열, 숫자, 불린, undefined, null, 심볼입니다.",
            "sections": [
              {
                "heading": "문자열(String)",
                "text": "문자열은 텍스트 데이터를 나타냅니다. 작은따옴표, 큰따옴표, 또는 백틱(`)으로 감싸 표현합니다.",
                "code": "const name1 = 'Alice';\nconst name2 = \"Bob\";\nconst name3 = `Charlie`; // 템플릿 리터럴\n\nconst greeting = `Hello, ${name1}!`; // 문자열 보간"
              },
              {
                "heading": "숫자(Number)",
                "text": "JavaScript의 숫자는 정수와 실수를 구분하지 않습니다. 모두 Number 타입으로 처리됩니다.",
                "code": "const integer = 42;\nconst decimal = 3.14;\nconst negative = -10;\nconst scientific = 1e3; // 1000과 같음\n\nconst result = integer + decimal; // 45.14"
              },
              {
                "heading": "불린(Boolean)",
                "text": "불린은 참(true)과 거짓(false) 두 가지 값만 가집니다. 조건문에서 자주 사용됩니다.",
                "code": "const isLoggedIn = true;\nconst hasPermission = false;\n\nif (isLoggedIn && hasPermission) {\n  console.log('접근 허용');\n} else {\n  console.log('접근 거부');\n}"
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "데이터 타입 마스터!",
              "content": "<span class='font-bold text-green-300'>모든 데이터 타입을 올바르게 할당했습니다!</span> 이제 기본 데이터 타입을 완벽히 이해했어요. 다음 주차에서는 더 복잡한 데이터 구조를 배워봅시다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "타입이 일치하지 않습니다",
              "content": "{{ERROR_MESSAGE}} 각 변수에 올바른 타입을 할당했는지 확인해보세요. typeof 연산자를 사용해서 타입을 검사해볼 수 있습니다!"
            }
          }
        }
      ]
    },
    {
      "week": 3,
      "title": "제어문과 반복문 - 조건부 실행과 루프",
      "cycles": [
        {
          "title": "if/else 조건문 작성",
          "syntax_key": "conditionals",
          "filename": "conditionals.js",
          "starterCode": "// TODO: 학생 점수를 받아 등급을 판정하는 코드를 작성하세요.\n// 90 이상: 'A'\n// 80 이상: 'B'\n// 70 이상: 'C'\n// 60 이상: 'D'\n// 60 미만: 'F'\n\nconst score = 85;\n\n// 여기에 코드를 작성하세요\n\n",
          "testCode": "let grade;\nif (score >= 90) {\n  grade = 'A';\n} else if (score >= 80) {\n  grade = 'B';\n} else if (score >= 70) {\n  grade = 'C';\n} else if (score >= 60) {\n  grade = 'D';\n} else {\n  grade = 'F';\n}\nif (grade !== 'B') throw new Error(`점수 85는 'B'여야 합니다.`);",
          "expectedPrintOutput": "등급: B",
          "task": {
            "character": "alex",
            "subtitle": "팀장 업무 지시",
            "title": "학생 성적 판정 프로그램",
            "content": "우리 회사에서는 학생 관리 시스템을 개발하고 있습니다. <span class='font-bold text-yellow-300'>점수에 따라 학생의 등급을 자동으로 판정하는 프로그램</span>을 작성해보세요. if/else 조건문을 사용하면 돼요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "if/else 작성 팁",
            "content": "<span class='font-bold text-teal-300'>조건은 가장 제한적인 것부터 확인</span>하는 것이 좋아요. 예를 들어 90 이상을 먼저 확인하고, 그 다음에 80 이상을 확인하는 식이죠. 이렇게 하면 로직이 명확해져요. 그리고 특수한 경우(edge case)를 항상 고려해야 한답니다!"
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 강의: 조건문의 논리",
            "keyTakeaway": "if/else는 조건의 참/거짓에 따라 다른 코드를 실행하는 제어 흐름입니다.",
            "sections": [
              {
                "heading": "if/else 문법",
                "text": "if 문은 주어진 조건이 참이면 코드를 실행합니다. else는 조건이 거짓일 때 실행할 코드를 지정합니다.",
                "code": "const age = 18;\n\nif (age >= 18) {\n  console.log('성인입니다');\n} else {\n  console.log('미성년자입니다');\n}"
              },
              {
                "heading": "else if 연쇄",
                "text": "여러 조건을 순차적으로 확인할 때는 else if를 사용합니다. 첫 번째로 참인 조건의 블록이 실행됩니다.",
                "code": "const score = 85;\nlet grade;\n\nif (score >= 90) {\n  grade = 'A';\n} else if (score >= 80) {\n  grade = 'B';\n} else if (score >= 70) {\n  grade = 'C';\n} else {\n  grade = 'F';\n}\n\nconsole.log(`등급: ${grade}`); // 등급: B"
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "성적 판정 완성!",
              "content": "<span class='font-bold text-green-300'>학생 성적 판정 프로그램이 완벽하게 작동합니다!</span> 조건문을 잘 이해하고 적용했어요. 이제 반복문을 배워봅시다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "등급 판정이 잘못되었습니다",
              "content": "{{ERROR_MESSAGE}} 점수별 등급 기준을 다시 확인해보세요. 특히 경계값(80, 90 등)을 정확히 처리했는지 확인이 필요합니다."
            }
          }
        }
      ]
    },
    {
      "week": 4,
      "title": "함수와 배열 - 코드 재사용과 컬렉션",
      "cycles": [
        {
          "title": "함수 정의와 호출",
          "syntax_key": "functions",
          "filename": "functions.js",
          "starterCode": "// TODO: 두 숫자를 받아서 합을 반환하는 함수 'add'를 작성하세요.\n\n\n// 여기에 함수를 정의하세요\n\n\n// 함수 테스트: add(3, 5)를 호출하여 결과를 출력하세요\n\n",
          "testCode": "function add(a, b) {\n  return a + b;\n}\n\nconst result = add(3, 5);\nif (result !== 8) {\n  throw new Error(`add(3, 5)는 8이어야 하는데 ${result}가 반환되었습니다.`);\n}",
          "expectedPrintOutput": "8",
          "task": {
            "character": "alex",
            "subtitle": "팀장 업무 지시",
            "title": "재사용 가능한 함수 작성",
            "content": "프로그래밍에서 가장 중요한 개념 중 하나는 코드의 재사용입니다. <span class='font-bold text-yellow-300'>함수를 사용하면 반복되는 로직을 한 번만 작성하고 여러 번 사용</span>할 수 있어요. 간단한 덧셈 함수를 만들어보세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 설계 팁",
            "content": "<span class='font-bold text-teal-300'>좋은 함수는 한 가지 일만 잘 하는 함수</span>입니다. 덧셈 함수는 오직 두 숫자를 더하는 일만 하고, 다른 복잡한 로직은 처리하지 않는 거죠. 또한 함수 이름을 명확하게 지으면 코드를 읽을 때 훨씬 이해하기 쉬워요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 강의: 함수의 개념",
            "keyTakeaway": "함수는 입력(매개변수)을 받아서 처리하고 결과(반환값)를 돌려주는 재사용 가능한 코드 블록입니다.",
            "sections": [
              {
                "heading": "함수 선언과 호출",
                "text": "function 키워드로 함수를 정의하고, 함수명()으로 호출합니다.",
                "code": "// 함수 정의\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\n// 함수 호출\nconst message = greet('Alice');\nconsole.log(message); // Hello, Alice!"
              },
              {
                "heading": "매개변수와 반환값",
                "text": "함수는 괄호 안의 매개변수를 통해 입력을 받고, return 키워드로 결과를 반환합니다.",
                "code": "function add(a, b) {\n  return a + b;\n}\n\nconst sum = add(3, 5);\nconsole.log(sum); // 8"
              },
              {
                "heading": "화살표 함수(Arrow Function)",
                "text": "ES6부터는 화살표 함수 문법을 사용할 수 있습니다. 더 간결하고 현대적입니다.",
                "code": "// 기존 방식\nconst add1 = function(a, b) {\n  return a + b;\n};\n\n// 화살표 함수\nconst add2 = (a, b) => {\n  return a + b;\n};\n\n// 더 간결한 형태\nconst add3 = (a, b) => a + b;"
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "함수 작성 완성!",
              "content": "<span class='font-bold text-green-300'>add 함수가 완벽하게 작동합니다!</span> 이제 함수의 개념을 이해했어요. 다음은 배열에 대해 배워봅시다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "함수의 반환값이 잘못되었습니다",
              "content": "{{ERROR_MESSAGE}} add 함수가 올바른 값을 반환하는지 확인해보세요. 특히 return 문이 제대로 있는지 확인해야 합니다!"
            }
          }
        }
      ]
    }
  ]
}
