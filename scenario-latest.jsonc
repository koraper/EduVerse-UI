{
  // 커리큐럼명
  "courseTitle": "LogiCore Tech 신입 개발자 과정",
  
  // 주차별 시나리오 목록
  "weeks": [
    {
      // 주차 번호 및 제목
      "week": 1,
      // 주차 제목
      "title": "첫 코드 작성과 데이터 저장",
      // 해당 주차의 사이클(과제) 목록
      "cycles": [
        {
          // 과제 제목
          "title": "첫 파이썬 프로그램 작성 (print)",
          // 문법 키
          "syntax_key": "print_statement",
          // 파일 이름(에디터 탭에 표시될 이름)
          "filename": "hello.py",
          // 초급자 시작 코드
          "starterCode": "# TODO: 괄호 안에 \"Welcome to LogiCore Tech!\" 를 따옴표와 함께 그대로 입력하세요.\nprint()\n",
          // 경험자 시작 코드
          "starterCode_adv": "# 아래 함수는 환영 메시지를 반환합니다.\n# TODO: 함수 본문에서 \"Welcome to LogiCore Tech!\" 문자열을 print() 함수로 출력하도록 수정하세요.\ndef print_welcome():\n    message = \"Welcome to LogiCore Tech!\"\n    # 여기에 코드를 작성하여 message 변수를 출력하세요.\n\n\n# 함수 호출 (이 부분은 수정하지 마세요)\nprint_welcome()\n",
          // 초급자 테스트 코드
          "testCode": "import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); expected = 'Welcome to LogiCore Tech!'; assert output == expected, f\"출력된 메시지가 요청과 다릅니다. 기대값: '{expected}', 실제 출력값: '{output}'\"",
          // 경험자 테스트 코드
          "testCode_adv": "import io; from contextlib import redirect_stdout; assert callable(print_welcome), 'print_welcome 함수가 정의되지 않았습니다.'; f = io.StringIO(); with redirect_stdout(f): print_welcome(); output = f.getvalue().strip(); expected = 'Welcome to LogiCore Tech!'; assert output == expected, f\"함수 호출 시 출력된 메시지가 요청과 다릅니다. 기대값: '{expected}', 실제 출력값: '{output}'\"",
          // 초급자 과제 설명
          "task": {
            // 과제 지시 캐릭터 
            "character": "alex",
            // 과제 지시 부제목
            "subtitle": "팀장 과업 지시",
            // 과제 지시 제목
            "title": "환영 메시지 출력 함수 완성",
            // 과제 지시 내용
            "content": "${userName}님, 환영합니다! 개발자로서의 첫 임무는 간단합니다. 화면에 <span class='font-bold text-yellow-300'>\"Welcome to LogiCore Tech!\"</span> 라는 환영 메시지를 출력하는 파이썬 코드를 작성해주세요. 개발 환경은 이미 준비되어 있습니다."
          },
          // 경험자 과제 설명
          "task_adv": {
            // 과제 지시 캐릭터
            "character": "alex",
            // 과제 지시 부제목
            "subtitle": "팀장 과업 지시",
            // 과제 지시 제목
            "title": "환영 메시지 출력 함수 완성",
            // 과제 지시 내용
            "content": "${userName}님, 환영합니다! 첫 업무로, 이미 작성된 `print_welcome` 함수가 <span class='font-bold text-yellow-300'>\"Welcome to LogiCore Tech!\"</span> 메시지를 화면에 출력하도록 완성해주세요. 함수 구조는 이미 잡혀있으니, 핵심 출력 부분만 구현하면 됩니다."
          },
          // 초급자 브리핑
          "briefing": {
            // 브리핑 캐릭터
            "character": "sena",
            // 브리핑 부제목
            "subtitle": "직속 선임의 힌트",
            // 브리핑 제목
            "title": "화면에 글자 출력하기",
            // 브리핑 내용
            "content": "세나 선임이에요! 반갑습니다. 화면에 글자를 출력하려면 <span class='font-bold text-teal-300'>`print()`</span> 라는 명령어를 써요. `starterCode`에 보면 `print()` 괄호가 비어있죠? 그 안에 <span class='font-bold text-teal-300'>`\"Welcome to LogiCore Tech!\"`</span> 라고 큰따옴표까지 똑같이 입력해보세요. 그러면 화면에 그 글자가 나타날 거예요!"
          },
          // 경험자 브리핑
          "briefing_adv": {
            // 브리핑 캐릭터
            "character": "sena",
            // 브리핑 부제목
            "subtitle": "직속 선임의 팁",
            // 브리핑 제목
            "title": "함수 안에서 출력하기",
            // 브리핑 내용
            "content": "함수 안에서 값을 화면에 보여줄 때도 똑같이 <span class='font-bold text-teal-300'>`print()` 함수</span>를 쓰면 돼요. 이미 `message` 변수에 원하는 문자열이 들어있으니, 그 변수를 `print()` 함수에 넘겨주기만 하면 되겠네요!"
          },
          // 교수 강의 노트
          "lecture": {
            // 강의 캐릭터
            "character": "profKim",
            // 강의 제목
            "title": "강의 노트: print() 함수와 문자열",
            // 핵심 요약
            "keyTakeaway": "`print()` 함수는 괄호 안의 내용을 화면에 보여주는 가장 기본적인 명령입니다.",
            // 샌드박스 코드
            "sandboxCode": "print(\"파이썬, 반가워!\")",
            // 강의 섹션 목록
            "sections": [
              {
                // 섹션 제목
                "heading": "핵심 개념",
                // 섹션 내용
                "text": "프로그램은 컴퓨터에 내리는 '명령문'들의 순차적인 나열입니다[cite: 871]. `print()`는 파이썬이 기본으로 제공하는 '함수'이며, 괄호 안에 주어진 값을 화면(터미널)에 출력하라는 명령을 수행합니다[cite: 586, 872].",
                // 섹션 코드 예시
                "code": null
              },
              {
                // 섹션 제목
                "heading": "기본 문법",
                // 섹션 내용
                "text": "따옴표 안에 출력하고 싶은 문장을 넣어 함수를 호출합니다[cite: 937, 940].",
                // 섹션 코드 예시
                "code": "# 큰따옴표 사용\nprint(\"Hello, World!\")\n\n# 작은따옴표도 가능\nprint('Hello, Python!')"
              },
              {
                // 섹션 제목
                "heading": "활용 사례",
                // 섹션 내용
                "text": "프로그램의 실행 상태를 확인하거나, 사용자에게 메시지를 보여주거나, 계산 결과를 출력하는 등 가장 기본적이고 중요한 기능입니다[cite: 870].",
                // 섹션 코드 예시
                "code": null
              },
              {
                // 섹션 제목
                "heading": "주의점 및 팁",
                // 섹션 내용
                "text": "문자열은 반드시 작은따옴표('')나 큰따옴표(\"\")로 감싸야 합니다[cite: 937, 940]. 또한, 파이썬은 대소문자를 구분하므로 `Print()`가 아닌 `print()`로 정확하게 입력해야 합니다[cite: 868].",
                // 섹션 코드 예시
                "code": null
              }
            ]
          },
          // 초급자 피드백
          "feedback": {
            // 성공 피드백  
            "success": {
              // 피드백 캐릭터
              "character": "alex",
              // 피드백 부제목
              "subtitle": "업무 완료 피드백",
              // 피드백 제목
              "title": "첫 코드 실행 성공!",
              // 피드백 내용
              "content": "환영 메시지가 정확하게 출력되었군요. <span class='font-bold text-green-300'>첫 파이썬 코드 실행을 성공적으로 마쳤습니다.</span> 좋습니다! LogiCore Tech에서의 여정을 시작한 것을 축하합니다."
            },
            // 논리적 오류 피드백
            "failure_logical": {
              // 피드백 캐릭터
              "character": "sena",
              // 피드백 부제목
              "subtitle": "문제 해결 지원",
              // 피드백 제목
              "title": "출력 내용을 확인해볼까요?",
              // 피드백 내용
              "content": "앗, 출력된 메시지가 요청한 것과 조금 다르네요. `print()` 괄호 안에 <span class='font-bold text-teal-300'>큰따옴표(`\"`)</span>까지 포함해서 `\"Welcome to LogiCore Tech!\"`를 정확히 입력했는지 확인해보세요. 오타나 빠진 글자가 없는지도요!"
            },
            // 런타임 오류 피드백
            "failure_runtime": {
              // 피드백 캐릭터
              "character": "sena",
              // 피드백 부제목
              "subtitle": "문제 해결 지원",
              // 피드백 제목
              "title": "앗, 문법 오류!",
              // 피드백 내용
              "content": "어이쿠, 코드를 실행하다가 오류가 발생했어요. 혹시 `print`를 `Print`로 잘못 쓰시진 않았나요? 아니면 문자열 양쪽에 따옴표를 빠뜨렸을 수도 있고요. 파이썬은 이런 사소한 실수에 민감하거든요. 오류 메시지를 천천히 읽어보시면 어디가 틀렸는지 힌트를 얻을 수 있을 거예요."
            }
          },
          // 경험자 피드백
          "feedback_adv": {
            // 성공 피드백  
            "success": {
              // 피드백 캐릭터
              "character": "alex",
              // 피드백 부제목
              "subtitle": "업무 완료 피드백",
              // 피드백 제목
              "title": "첫 코드 실행 성공!",
              // 피드백 내용
              "content": "환영 메시지가 정확하게 출력되었군요. <span class='font-bold text-green-300'>첫 파이썬 코드 실행을 성공적으로 마쳤습니다.</span> 좋습니다! LogiCore Tech에서의 여정을 시작한 것을 축하합니다."
            },
            // 논리적 오류 피드백
            "failure_logical": {
              // 피드백 캐릭터
              "character": "sena",
              // 피드백 부제목
              "subtitle": "문제 해결 지원",
              // 피드백 제목
              "title": "출력 내용을 확인해볼까요?",
              // 피드백 내용
              "content": "앗, 출력된 메시지가 요청한 것과 조금 다르네요. `print()` 괄호 안에 <span class='font-bold text-teal-300'>큰따옴표(`\"`)</span>까지 포함해서 `\"Welcome to LogiCore Tech!\"`를 정확히 입력했는지 확인해보세요. 오타나 빠진 글자가 없는지도요!"
            },
            // 런타임 오류 피드백
            "failure_runtime": {
              // 피드백 캐릭터
              "character": "sena",
              // 피드백 부제목
              "subtitle": "문제 해결 지원",
              // 피드백 제목
              "title": "앗, 문법 오류!",
              // 피드백 내용
              "content": "어이쿠, 코드를 실행하다가 오류가 발생했어요. 혹시 `print`를 `Print`로 잘못 쓰시진 않았나요? 아니면 문자열 양쪽에 따옴표를 빠뜨렸을 수도 있고요. 파이썬은 이런 사소한 실수에 민감하거든요. 오류 메시지를 천천히 읽어보시면 어디가 틀렸는지 힌트를 얻을 수 있을 거예요."
            }
          }
        },
        {
          // 두 번째 과제 제목
          "title": "코드 설명 남기기 (주석)",
          "syntax_key": "comments",
          "filename": "welcome_commented.py",
          "starterCode": "# TODO: '#' 뒤에 이 파일에 대한 설명을 자유롭게 적어보세요. (예: 환영 메시지 출력 스크립트)\n\n\n# TODO: '#' 뒤에 아래 코드에 대한 설명을 자유롭게 적어보세요. (예: 환영 메시지를 화면에 출력)\n\nprint(\"Welcome again!\")\n",
          "starterCode_adv": "# TODO: 아래 함수 정의 바로 위에, 이 함수가 무엇을 하는 함수인지 설명하는 한 줄 주석을 추가하세요.\ndef greet(name):\n    # TODO: 아래 print문 바로 위에, 어떤 내용을 출력하는지 설명하는 주석을 추가하세요.\n    print(f\"{name}님, 다시 오신 것을 환영합니다!\")\n\n# 함수 호출 (수정 불필요)\ngreet(\"김선임\")\n",
          "testCode": "lines = source_code.strip().split('\\n'); assert lines[0].strip().startswith('#'), \"첫 줄에 주석이 작성되지 않았습니다.\"; assert len(lines) >= 3 and lines[-2].strip().startswith('#'), \"print문 바로 위에 주석이 작성되지 않았습니다.\"; assert 'print(\"Welcome again!\")' in lines[-1], \"print문이 코드의 마지막 줄에 있어야 합니다.\"",
          "testCode_adv": "lines = source_code.strip().split('\\n'); greet_def_line = -1; for i, line in enumerate(lines): if line.strip().startswith('def greet('): greet_def_line = i; break; assert greet_def_line > 0 and lines[greet_def_line - 1].strip().startswith('#'), '함수 정의 바로 위에 함수 설명 주석이 필요합니다.'; print_line = -1; for i, line in enumerate(lines): if line.strip().startswith('print(f\"'): print_line = i; break; assert print_line > 0 and lines[print_line - 1].strip().startswith('#'), 'print문 바로 위에 코드 설명 주석이 필요합니다.'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "코드 가독성 높이기",
            "content": "다른 개발자나 미래의 내가 코드를 쉽게 이해하려면 설명을 덧붙이는 것이 중요합니다. 방금 작성한 코드에 <span class='font-bold text-yellow-300'>'주석(Comment)'</span>을 추가하여, 해당 코드가 어떤 역할을 하는지 설명을 남겨주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "함수 설명 추가",
            "content": "코드 가독성을 위해 주석은 필수입니다. 제공된 `greet` 함수 코드에 <span class='font-bold text-yellow-300'>함수의 역할</span>과 <span class='font-bold text-yellow-300'>print문의 기능</span>을 설명하는 주석을 각각 적절한 위치에 추가해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "코드에 메모 남기기",
            "content": "주석은 코드에 남기는 메모 같은 거예요. 코드 실행에는 영향을 주지 않으면서 설명을 추가할 수 있죠[cite: 893, 904]. 파이썬에서는 <span class='font-bold text-teal-300'>`#` 기호 뒤에 오는 모든 내용</span>이 주석으로 처리돼요[cite: 891]. `starterCode`에 보면 `#` 기호만 덩그러니 있죠? 그 뒤에 `TODO` 주석에서 안내하는 대로 자유롭게 설명을 적어보세요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "주석은 어디에?",
            "content": "함수나 중요한 코드 블록 바로 윗줄에 <span class='font-bold text-teal-300'>`#` 기호</span>를 사용해서 이게 어떤 기능을 하는지 설명해주는 게 일반적이에요. 복잡한 계산식이나 로직이 있다면 그 줄 끝에 간단한 설명을 덧붙이기도 하고요. 어디에 쓰는 게 다른 사람이 이해하기 쉬울지 생각해보세요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 주석 (Comment)",
            "keyTakeaway": "주석은 `#` 기호로 시작하며, 코드의 가독성을 높이고 설명을 추가하는 데 사용됩니다.",
            "sandboxCode": "# 이 줄은 주석입니다. 아래 코드는 5를 출력합니다.\nprint(5)",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "주석은 프로그램 코드 내에 포함되지만, 파이썬 인터프리터가 실행하지 않고 무시하는 설명문입니다[cite: 891]. 코드를 읽는 사람의 이해를 돕기 위해 사용됩니다[cite: 904].",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "`#` 기호를 사용하면 그 줄의 `#` 이후 모든 내용이 주석 처리됩니다[cite: 891].",
                "code": "# 이것은 한 줄 전체 주석입니다.\n\nprint(\"Hello\") # 이것은 코드 뒤에 붙는 주석입니다."
              },
              {
                "heading": "활용 사례",
                "text": "복잡한 로직 설명, 코드 작성 의도 명시, 임시로 코드 비활성화 등 다양한 목적으로 사용됩니다 [cite: 898-902].",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "주석은 코드가 '어떻게' 동작하는지보다 '왜' 그렇게 작성되었는지를 설명하는 데 집중하는 것이 좋습니다[cite: 903]. 너무 당연한 내용의 주석은 오히려 가독성을 해칠 수 있습니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "가독성 향상",
              "content": "<span class='font-bold text-green-300'>주석을 적절하게 잘 추가했군요.</span> 이제 코드를 이해하기 훨씬 수월해졌습니다. 좋은 습관입니다. 다음 단계로 넘어가죠."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "주석 기호를 확인해보세요!",
              "content": "음, 주석 처리가 제대로 안 된 것 같아요. 설명을 적기 전에 <span class='font-bold text-teal-300'>`#` 기호</span>를 먼저 입력했는지 확인해주세요. `#` 기호가 없으면 파이썬이 코드로 인식해서 오류가 날 수 있어요!"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 주석 처리 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. 혹시 주석을 시작할 때 `#` 기호를 빠뜨린 건 아닐까요? `#` 기호가 없으면 파이썬은 그 줄을 코드로 인식하려고 해서 오류가 날 수 있어요."
            }
          }
        },
        {
          // 세 번째 과제 제목
          "title": "데이터 저장하기 (변수와 자료형)",
          "syntax_key": "variables_datatypes",
          "filename": "server_status.py",
          "starterCode": "# TODO: '=' 오른쪽에 \"LogiCore\"를 따옴표와 함께 그대로 입력하세요.\nservice_name = \n\n# TODO: '=' 오른쪽에 숫자 100을 입력하세요. (숫자는 따옴표가 필요 없어요)\nconcurrent_users = \n\n# TODO: '=' 오른쪽에 True (첫 글자 대문자)를 입력하세요.\nis_active = \n",
          "starterCode_adv": "# 아래 함수는 서버 상태 정보를 딕셔너리로 반환합니다.\n# TODO: 함수 내부에 service_name, concurrent_users, is_active 변수를\n#       각각 \"LogiCore\", 100, True 값으로 정의하고,\n#       이 변수들을 사용하여 딕셔너리를 완성하세요.\ndef get_server_status():\n    # 여기에 변수들을 정의하세요.\n    service_name = \"\"\n    concurrent_users = 0\n    is_active = False\n    \n    status_info = {\n        \"name\": service_name,\n        \"users\": concurrent_users,\n        \"active\": is_active\n    }\n    return status_info\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nserver_info = get_server_status()\nprint(server_info)\n",
          "testCode": "assert 'service_name' in locals() and service_name == 'LogiCore', \"service_name 변수에 'LogiCore' 문자열을 할당해야 합니다.\"; assert 'concurrent_users' in locals() and concurrent_users == 100, \"concurrent_users 변수에 숫자 100을 할당해야 합니다.\"; assert 'is_active' in locals() and is_active is True, \"is_active 변수에 불리언 값 True를 할당해야 합니다.\"",
          "testCode_adv": "assert 'get_server_status' in locals() and callable(get_server_status), 'get_server_status 함수가 정의되지 않았습니다.'; status = get_server_status(); assert isinstance(status, dict), 'get_server_status 함수는 딕셔너리를 반환해야 합니다.'; assert status.get('name') == 'LogiCore', \"딕셔너리의 'name' 값이 'LogiCore'여야 합니다.\"; assert status.get('users') == 100, \"딕셔너리의 'users' 값이 100이어야 합니다.\"; assert status.get('active') is True, \"딕셔너리의 'active' 값이 True여야 합니다.\"",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "서비스 기본 정보 설정",
            "content": "좋은 아침입니다, ${userName}님. 간단한 업무부터 시작하죠. 우리 서비스의 <span class='font-bold text-yellow-300'>운영 상태를 관리할 변수</span>가 필요합니다. 서비스 이름(`service_name`)과 현재 동시 접속자 수(`concurrent_users`), 그리고 서비스 오픈 여부(`is_active`)를 각각 <span class='font-bold text-yellow-300'>문자열, 숫자, 불리언(True/False) 값</span>으로 변수에 저장해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "서버 상태 정보 함수 완성",
            "content": "서버 상태 정보를 반환하는 함수 `get_server_status`가 있습니다. 함수 내부에 <span class='font-bold text-yellow-300'>서비스 이름('LogiCore'), 동시 접속자 수(100), 오픈 여부(True)</span>를 각각 적절한 변수에 저장하고, 이 변수들을 사용하여 반환될 딕셔너리를 완성해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 OJT",
            "title": "데이터를 담는 상자, 변수",
            "content": "세나 선임이에요! 변수는 데이터를 잠시 저장해두는 이름표 같은 거예요 [cite: 1041-1043]. `starterCode`를 보면 `이름 = ` 형태가 보이죠? <span class='font-bold text-teal-300'>`=` 기호</span>는 오른쪽 값을 왼쪽 이름표에 저장하라는 뜻이에요[cite: 1128]. `TODO` 주석대로 각 빈칸에 <span class='font-bold text-teal-300'>`\"LogiCore\"`, `100`, `True`</span>를 정확히 입력해보세요. 글자(`\"LogiCore\"`)는 따옴표가 필요하고, 숫자(`100`)나 참/거짓(`True`)은 필요 없다는 것도 기억해두면 좋아요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서의 변수 사용",
            "content": "함수 안에서도 변수를 만드는 건 똑같아요. `=` 기호를 써서 <span class='font-bold text-teal-300'>변수 이름에 값을 저장</span>하면 되죠. 문자열은 따옴표, 숫자는 그냥 쓰고, 참/거짓은 `True`나 `False`로 쓰는 것만 기억하면 돼요. 이렇게 만든 변수들을 딕셔너리에 넣어서 반환하는 구조네요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 변수와 자료형",
            "keyTakeaway": "변수는 값을 저장하는 공간이며, `=` 기호를 사용해 값을 할당(저장)합니다.",
            "sandboxCode": "# my_age 변수에 자신의 나이를 숫자로 저장하고 출력해보세요.\nmy_age = 25\nprint(my_age)",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "변수(Variable)는 데이터를 저장하기 위해 이름표를 붙인 메모리 공간입니다 [cite: 1041-1043]. 파이썬에서는 변수를 만들기 전에 미리 타입을 선언할 필요가 없습니다 [cite: 1137-1138]. 값을 할당하면 그 값의 종류에 따라 자동으로 자료형(Data Type)이 결정됩니다[cite: 1052].",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "`변수이름 = 값` 형태로 값을 할당합니다[cite: 1128].",
                "code": "# 숫자형 (Integer)\nuser_count = 100\n\n# 문자열 (String)\nserver_status = \"running\"\n\n# 불리언 (Boolean)\nis_admin = True"
              },
              {
                "heading": "활용 사례",
                "text": "사용자 이름, 나이, 점수 등 프로그램이 동작하는 동안 계속해서 사용되거나 변경될 수 있는 모든 데이터를 저장하는 데 사용됩니다[cite: 1052].",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "변수 이름은 숫자로 시작할 수 없으며, 공백을 포함할 수 없습니다 [cite: 1047-1048, 1050]. 또한, `my_name`과 `My_Name`은 서로 다른 변수로 인식될 만큼 대소문자를 엄격하게 구분합니다[cite: 1051].",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "기본 설정 완료",
              "content": "<span class='font-bold text-green-300'>변수들이 정확하게 선언되었군요.</span> 좋습니다. 이제 이 변수들을 이용해 우리 서비스가 다양한 상황에 맞게 동작하도록 만들 수 있습니다. 다음 업무로 넘어가죠."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "값을 다시 확인해볼까요?",
              "content": "음, 저장된 값이 조금 다른 것 같아요. `service_name`에는 <span class='font-bold text-teal-300'>따옴표(`\"`)</span>로 감싼 `\"LogiCore\"`를 입력했나요? `concurrent_users`에는 숫자 <span class='font-bold text-teal-300'>`100`</span>을, `is_active`에는 <span class='font-bold text-teal-300'>`True`(대문자 T)</span>를 정확히 입력했는지 확인해주세요!"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 문법 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. 변수 이름 규칙을 어긴 건 아닐까요? 변수 이름은 숫자로 시작할 수 없고, `my-name`처럼 특수문자를 쓸 수 없어요. 변수 이름을 다시 한번 확인해주세요!"
            }
          }
        }
      ]
    },
    {
      // 두 번째 주차
      "week": 2,
      "title": "데이터 가공하기: 연산자와 문자열",
      "cycles": [
        {
          "title": "숫자 계산하기 (연산자)",
          "syntax_key": "operators",
          "filename": "analysis.py",
          "starterCode": "total_visits = 1250\npaid_users = 50\n\n# TODO: '=' 오른쪽에 전환율 계산식을 작성하세요.\n# 전환율 공식: (유료 전환 사용자 / 총 방문자 수) * 100\nconversion_rate = \n\n# TODO: print() 괄호 안에 conversion_rate 변수 이름을 넣어 값을 출력하세요.\nprint()\n",
          "starterCode_adv": "# 아래 함수는 방문자 수와 유료 사용자 수를 받아 전환율을 계산하여 반환합니다.\n# TODO: 함수 본문에서 전환율 계산 로직을 완성하세요.\n# 전환율 공식: (유료 사용자 / 총 방문자 수) * 100\ndef calculate_conversion_rate(total_visits, paid_users):\n    rate = 0\n    # 여기에 계산식을 작성하여 rate 변수에 저장하세요.\n    \n    return rate\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nconversion_rate = calculate_conversion_rate(1250, 50)\nprint(conversion_rate)\n",
          "testCode": "assert 'conversion_rate' in locals(), \"'conversion_rate' 변수가 선언되지 않았습니다.\"; assert abs(conversion_rate - 4.0) < 0.001, f\"계산된 전환율이 4.0이 아닙니다. 실제 계산값: {conversion_rate}\"; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); assert abs(float(output) - 4.0) < 0.001, 'conversion_rate의 값이 올바르게 출력되지 않았습니다.'",
          "testCode_adv": "assert callable(calculate_conversion_rate), 'calculate_conversion_rate 함수가 정의되지 않았습니다.'; result = calculate_conversion_rate(1250, 50); assert abs(result - 4.0) < 0.001, f'함수 반환값이 올바르지 않습니다. 기대값: 4.0, 실제값: {result}'; assert 'conversion_rate' in locals() and abs(conversion_rate - 4.0) < 0.001, '전역 변수 conversion_rate 값이 올바르지 않습니다.'; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); assert abs(float(output) - 4.0) < 0.001, 'conversion_rate의 값이 올바르게 출력되지 않았습니다.'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "사용자 데이터 분석",
            "content": "기획팀에서 간단한 데이터 분석을 요청했습니다. 어제 하루 동안의 <span class='font-bold text-yellow-300'>총 방문자 수(total_visits)가 1,250명</span>이고, <span class='font-bold text-yellow-300'>유료 전환 사용자(paid_users)가 50명</span>일 때, '유료 전환율(conversion_rate)'이 몇 퍼센트인지 계산해서 출력해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "전환율 계산 함수 완성",
            "content": "전환율을 계산하는 함수 `calculate_conversion_rate`가 있습니다. 함수 내부의 계산 로직을 완성하여, <span class='font-bold text-yellow-300'>총 방문자 수와 유료 사용자 수를 바탕으로 정확한 전환율(%)을 계산</span>하고 반환하도록 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "파이썬으로 계산하기",
            "content": "간단한 계산이네요! (유료 전환 사용자 / 총 방문자 수) * 100 이죠? 파이썬에서는 <span class='font-bold text-teal-300'>나눗셈 `/`</span> 와 <span class='font-bold text-teal-300'>곱셈 `*`</span> 기호를 바로 쓸 수 있어요[cite: 1224, 1230]. `starterCode`의 `conversion_rate = ` 오른쪽 빈칸에 `(paid_users / total_visits) * 100` 이라고 그대로 입력해보세요. 괄호도 중요해요! 마지막으로 `print()` 괄호 안에는 계산 결과가 저장된 <span class='font-bold text-teal-300'>`conversion_rate`</span> 변수 이름을 넣으면 끝!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서의 계산",
            "content": "함수 안에서 계산하는 것도 똑같아요! 매개변수로 넘어온 `total_visits`와 `paid_users` 변수를 사용해서 <span class='font-bold text-teal-300'>산술 연산자(`*`, `/`)</span>로 계산식을 만들고, 그 결과를 `rate` 변수에 저장하면 돼요. 괄호를 써서 계산 순서를 명확히 하는 것도 좋고요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 연산자와 수식",
            "keyTakeaway": "연산자는 값을 계산하고 비교하는 데 사용되며, 괄호로 계산 순서를 제어할 수 있습니다.",
            "sandboxCode": "my_score = 85\npass_score = 60\n\n# my_score가 pass_score보다 높은지 확인해보세요.\nprint(my_score > pass_score)",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "연산자(Operator)는 덧셈, 뺄셈, 비교 등 특정 연산을 수행하는 기호입니다[cite: 1207]. 연산자와 값이 결합하여 만들어지는 하나의 식을 수식(Expression)이라고 합니다. 수식은 계산되어 하나의 결과값을 만들어냅니다 [cite: 1205-1206].",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "다양한 연산자를 사용하여 수식을 만들 수 있습니다 [cite: 1218-1292].",
                "code": "# 산술 연산자\nresult = 10 + 5   # 15\nresult = 10 / 2   # 5.0 (파이썬 3 기준, 파이썬 2에서는 5)\n\n# 비교 연산자 (결과는 True 또는 False)\nis_equal = (10 == 5) # False\nis_greater = (10 > 5)  # True"
              },
              {
                "heading": "활용 사례",
                "text": "점수 합계 계산, 상품 가격 비교, 사용자 입력값 검증 등 데이터에 기반한 모든 판단과 계산에 사용됩니다[cite: 1203].",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "곱셈/나눗셈(`*`, `/`)이 덧셈/뺄셈(`+`, `-`)보다 먼저 계산됩니다 [cite: 1306-1307]. 계산 순서가 헷갈릴 때는, 괄호 `()`를 사용하여 명확하게 순서를 지정해주는 것이 좋은 습관입니다[cite: 1308, 1349].",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "분석 결과 확인",
              "content": "<span class='font-bold text-green-300'>전환율 계산이 정확하네요.</span> 좋습니다. 이런 간단한 계산 자동화가 개발의 시작입니다. 이제 이 결과를 보고서 형태로 보기 좋게 만드는 작업을 해보죠."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "계산식이나 출력을 확인해볼까요?",
              "content": "어라, 계산 결과가 4.0이 아닌데요? `conversion_rate = ` 오른쪽에 <span class='font-bold text-teal-300'>(paid_users / total_visits) * 100</span> 이라고 정확히 입력했는지 확인해보세요. 변수 이름에 오타가 있거나, 괄호 `()` 를 빠뜨렸을 수도 있어요! 마지막 `print()` 괄호 안에는 변수 이름 `conversion_rate`를 넣었는지도요."
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 계산 중 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. 혹시 숫자가 아닌 값으로 계산을 시도했거나, 존재하지 않는 변수를 사용한 건 아닐까요? 변수 이름에 오타는 없는지 꼼꼼히 확인해보세요."
            }
          }
        },
        {
          "title": "문자열 조합하기 (포맷팅)",
          "syntax_key": "string_formatting",
          "filename": "report.py",
          "starterCode": "report_date = '2025-09-29'\nconversion_rate = 4.0\n\n# TODO: '=' 오른쪽에 f-string을 사용하여 \"[날짜] 기준, 유료 전환율은 [전환율]% 입니다.\" 형식의 문자열을 만드세요.\n#       문자열 앞에 f를 붙이고, 변수는 {} 안에 넣으세요. 예: f\"날짜: {report_date}\"\nreport_message = \n\n# TODO: print() 괄호 안에 report_message 변수 이름을 넣어 값을 출력하세요.\nprint()\n",
          "starterCode_adv": "# 아래 함수는 날짜와 전환율을 받아 보고서 문자열을 생성하여 반환합니다.\n# TODO: 함수 본문에서 f-string을 사용하여 지정된 형식의 보고서 문자열을 만들고 반환하세요.\n# 형식: \"[날짜] 기준, 유료 전환율은 [전환율]% 입니다.\"\ndef create_report_message(date_str, rate_float):\n    message = \"\"\n    # 여기에 f-string을 사용하여 message 변수에 문자열을 저장하세요.\n    \n    return message\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nreport_message = create_report_message('2025-09-29', 4.0)\nprint(report_message)\n",
          "testCode": "report_date = '2025-09-29'; conversion_rate = 4.0; expected_output = f\"{report_date} 기준, 유료 전환율은 {conversion_rate}% 입니다.\"; assert 'report_message' in locals(), \"'report_message' 변수를 선언해야 합니다.\"; assert report_message == expected_output, f\"report_message 변수의 값이 기대와 다릅니다. 기대값: '{expected_output}', 실제값: '{report_message}'\"; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); assert output == expected_output, 'report_message의 값이 올바르게 출력되지 않았습니다.'",
          "testCode_adv": "assert callable(create_report_message), 'create_report_message 함수가 정의되지 않았습니다.'; result = create_report_message('2025-09-29', 4.0); expected = '2025-09-29 기준, 유료 전환율은 4.0% 입니다.'; assert result == expected, f'함수 반환값이 올바르지 않습니다. 기대값: \"{expected}\", 실제값: \"{result}\"'; assert 'report_message' in locals() and report_message == expected, '전역 변수 report_message 값이 올바르지 않습니다.'; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); assert output == expected, 'report_message의 값이 올바르게 출력되지 않았습니다.'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "동적 보고 메시지 생성",
            "content": "방금 계산한 <span class='font-bold text-yellow-300'>유료 전환율 결과를 보고 메시지로 만드는 업무</span>입니다. `report_date` 변수(예: '2025-09-29')와 `conversion_rate` 변수의 값을 조합해서, <span class='font-bold text-yellow-300'>\"[날짜] 기준, 유료 전환율은 [전환율]% 입니다.\"</span> 와 같은 최종 문자열을 만들어 출력해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "보고서 메시지 생성 함수 완성",
            "content": "보고서 메시지를 생성하는 `create_report_message` 함수가 있습니다. 함수 내부 로직을 완성하여, <span class='font-bold text-yellow-300'>날짜 문자열과 전환율 숫자를 받아 지정된 형식의 보고서 문자열을 반환</span>하도록 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "f-string으로 문자열 꾸미기!",
            "content": "변수 값을 문자열 안에 쏙 넣고 싶을 때 <span class='font-bold text-teal-300'>f-string</span>을 쓰면 정말 편해요! `starterCode`의 `report_message = ` 오른쪽 빈칸에 이렇게 입력해보세요: <span class='font-bold text-teal-300'>`f\"{report_date} 기준, 유료 전환율은 {conversion_rate}% 입니다.\"`</span>. 문자열 시작 따옴표 앞에 <span class='font-bold text-teal-300'>`f`</span>를 붙이고, 변수 이름을 <span class='font-bold text-teal-300'>중괄호 `{}`</span>로 감싸는 게 핵심이에요! 마지막 `print()` 괄호 안에는 만들어진 문자열이 담긴 `report_message` 변수 이름을 넣으면 되겠죠?"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서 f-string 활용!",
            "content": "함수 안에서도 <span class='font-bold text-teal-300'>f-string</span>을 똑같이 쓸 수 있어요! 매개변수로 받은 `date_str`과 `rate_float` 변수를 문자열 안에 `{}` 중괄호로 넣어서 조합하면 끝이에요. 참 쉽죠?"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 문자열 포맷팅",
            "keyTakeaway": "f-string은 `f\"...{변수}...\"` 형태로, 변수 값을 문자열에 삽입하는 가장 현대적이고 편리한 방법입니다.",
            "sandboxCode": "item = \"커피\"\nprice = 5000\n\n# f-string을 이용해 \"상품: 커피, 가격: 5000원\"을 출력해보세요.\nprint(f\"상품: {item}, 가격: {price}원\")",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "문자열 포맷팅(String Formatting)은 문자열의 특정 위치에 변수의 값을 삽입하여, 동적인 문자열을 생성하는 기법입니다 [cite: 960-961, 963]. 이를 통해 형식화된 보고서, 알림 메시지 등을 쉽게 만들 수 있습니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "문자열 시작 따옴표 앞에 `f`를 붙이고, 삽입할 변수나 값을 중괄호 `{}`로 감싸줍니다[cite: 988].",
                "code": "# f-string (가장 추천하는 방식)\nname = \"Sena\"\nage = 30\nmessage = f\"안녕하세요, 제 이름은 {name}이고, 나이는 {age}살 입니다.\""
              },
              {
                "heading": "활용 사례",
                "text": "로그 메시지 기록, 사용자에게 보내는 이메일 내용 생성, 데이터베이스 쿼리 문자열 생성 등 변수와 문자열을 조합해야 하는 모든 상황에 사용됩니다[cite: 960].",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "f-string을 사용할 때, 문자열 시작 따옴표 앞에 `f`를 빠뜨리지 않도록 주의하세요[cite: 988]. 중괄호 `{}` 안에는 변수뿐만 아니라 ` {age + 1} `과 같은 간단한 계산식도 넣을 수 있습니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "보고서 형식 완성",
              "content": "<span class='font-bold text-green-300'>메시지가 아주 깔끔하게 출력되는군요.</span> f-string을 잘 활용했네요. 데이터를 다루는 기본기를 모두 익혔으니, 다음 주차에는 더 복잡한 로직을 다뤄보겠습니다. 수고했어요."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "f-string 형식을 확인해보세요",
              "content": "음, 만들어진 메시지가 요청한 형식과 조금 다르네요. 문자열 시작 따옴표 앞에 <span class='font-bold text-teal-300'>`f`</span>를 붙였는지, 변수 이름(`report_date`, `conversion_rate`)을 <span class='font-bold text-teal-300'>중괄호 `{}`</span>로 정확히 감쌌는지 확인해주세요. 띄어쓰기나 `%` 같은 문자도 똑같이 입력해야 해요!"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 문법 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. f-string을 사용할 때 가장 흔한 실수는 문자열 앞에 `f`를 빠뜨리는 거예요. 혹시 잊으신 건 아닐까요? 아니면 중괄호 `{}`를 빠뜨렸거나, 변수 이름에 오타가 있을 수도 있어요!"
            }
          }
        },
        {
          "title": "미니 프로젝트: 간단한 계산기 만들기",
          "syntax_key": "project_integration",
          "filename": "calculator.py",
          "starterCode": "# TODO: '=' 오른쪽에 숫자 10을 입력하세요.\nnum1 = \n\n# TODO: '=' 오른쪽에 숫자 5를 입력하세요.\nnum2 = \n\n# TODO: '=' 오른쪽에 num1과 num2를 더하는(+) 식을 작성하세요.\nadd_result = \n\n# TODO: '=' 오른쪽에 num1에서 num2를 빼는(-) 식을 작성하세요.\nsub_result = \n\n# TODO: '=' 오른쪽에 num1과 num2를 곱하는(*) 식을 작성하세요.\nmul_result = \n\n# TODO: '=' 오른쪽에 num1을 num2로 나누는(/) 식을 작성하세요.\ndiv_result = \n\n# TODO: print() 함수와 f-string을 사용하여 결과를 아래 형식으로 출력하세요.\n# 예: print(f\"덧셈 결과: {add_result}\")\n\n\n\n\n",
          "starterCode_adv": "# 아래 4개의 함수는 각각 두 숫자를 받아 덧셈, 뺄셈, 곱셈, 나눗셈 결과를 반환합니다.\n# TODO: 각 함수의 본문을 완성하여 올바른 계산 결과를 반환하도록 수정하세요.\ndef add(a, b):\n    return 0 # 수정 필요\n\ndef subtract(a, b):\n    return 0 # 수정 필요\n\ndef multiply(a, b):\n    return 0 # 수정 필요\n\ndef divide(a, b):\n    return 0 # 수정 필요\n\n# 함수 호출 및 결과 출력 (수정 불필요)\nnum1 = 10\nnum2 = 5\nadd_result = add(num1, num2)\nsub_result = subtract(num1, num2)\nmul_result = multiply(num1, num2)\ndiv_result = divide(num1, num2)\n\nprint(f\"덧셈 결과: {add_result}\")\nprint(f\"뺄셈 결과: {sub_result}\")\nprint(f\"곱셈 결과: {mul_result}\")\nprint(f\"나눗셈 결과: {div_result}\")\n",
          "testCode": "assert 'num1' in locals() and num1 == 10, 'num1 변수 값이 올바르지 않습니다.'; assert 'num2' in locals() and num2 == 5, 'num2 변수 값이 올바르지 않습니다.'; assert 'add_result' in locals() and add_result == 15, f'덧셈 결과가 올바르지 않습니다. 기대값: 15, 실제값: {locals().get(\"add_result\")}'; assert 'sub_result' in locals() and sub_result == 5, f'뺄셈 결과가 올바르지 않습니다. 기대값: 5, 실제값: {locals().get(\"sub_result\")}'; assert 'mul_result' in locals() and mul_result == 50, f'곱셈 결과가 올바르지 않습니다. 기대값: 50, 실제값: {locals().get(\"mul_result\")}'; assert 'div_result' in locals() and div_result == 2.0, f'나눗셈 결과가 올바르지 않습니다. 기대값: 2.0, 실제값: {locals().get(\"div_result\")}'; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip().split('\\n'); expected_lines = [f'덧셈 결과: {add_result}', f'뺄셈 결과: {sub_result}', f'곱셈 결과: {mul_result}', f'나눗셈 결과: {div_result}']; assert len(output) == 4, '4줄의 결과가 출력되어야 합니다.'; assert all(out == exp for out, exp in zip(output, expected_lines)), f'출력 형식이 올바르지 않습니다.\\n기대값:\\n{chr(10).join(expected_lines)}\\n실제값:\\n{chr(10).join(output)}'",
          "testCode_adv": "assert callable(add) and add(10, 5) == 15, 'add 함수가 올바르게 동작하지 않습니다.'; assert callable(subtract) and subtract(10, 5) == 5, 'subtract 함수가 올바르게 동작하지 않습니다.'; assert callable(multiply) and multiply(10, 5) == 50, 'multiply 함수가 올바르게 동작하지 않습니다.'; assert callable(divide) and divide(10, 5) == 2.0, 'divide 함수가 올바르게 동작하지 않습니다.'; assert 'add_result' in locals() and add_result == 15; assert 'sub_result' in locals() and sub_result == 5; assert 'mul_result' in locals() and mul_result == 50; assert 'div_result' in locals() and div_result == 2.0; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip().split('\\n'); expected_lines = [f'덧셈 결과: {add_result}', f'뺄셈 결과: {sub_result}', f'곱셈 결과: {mul_result}', f'나눗셈 결과: {div_result}']; assert len(output) == 4, '4줄의 결과가 출력되어야 합니다.'; assert all(out == exp for out, exp in zip(output, expected_lines)), f'출력 형식이 올바르지 않습니다.\\n기대값:\\n{chr(10).join(expected_lines)}\\n실제값:\\n{chr(10).join(output)}'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "미니 프로젝트: 계산 자동화",
            "content": "이번 주 배운 내용을 종합하여 간단한 계산기 스크립트를 만들어봅시다. <span class='font-bold text-yellow-300'>두 개의 숫자(10과 5)를 변수에 저장</span>하고, 이 두 숫자의 <span class='font-bold text-yellow-300'>덧셈, 뺄셈, 곱셈, 나눗셈 결과를 각각 계산</span>하여 별도의 변수에 저장해주세요. 마지막으로, 계산된 결과들을 <span class='font-bold text-yellow-300'>지정된 형식에 맞춰 화면에 출력</span>해야 합니다."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "미니 프로젝트: 계산기 함수 완성",
            "content": "기본적인 계산기 함수들이 준비되어 있습니다. <span class='font-bold text-yellow-300'>덧셈, 뺄셈, 곱셈, 나눗셈 함수(`add`, `subtract`, `multiply`, `divide`) 각각의 내부 로직을 완성</span>하여, 두 숫자를 입력받아 올바른 계산 결과를 반환하도록 수정해주세요. 함수들을 완성하면 전체 계산 결과가 출력될 것입니다."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "배운 것들을 조합해봐요!",
            "content": "미니 프로젝트네요! 지금까지 배운 걸 써먹을 시간이에요. `starterCode`의 빈칸들을 채워볼까요? 먼저 <span class='font-bold text-teal-300'>`num1`과 `num2`에 각각 10과 5</span>를 입력하고, 다음 빈칸들에는 <span class='font-bold text-teal-300'>`num1 + num2`, `num1 - num2`, `num1 * num2`, `num1 / num2`</span> 계산식을 넣으면 돼요. 마지막 출력 부분은 <span class='font-bold text-teal-300'>f-string</span> 기억나죠? `print(f\"덧셈 결과: {add_result}\")` 처럼 네 줄을 완성해보세요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수로 계산하기",
            "content": "함수 안에서 계산하는 것도 어렵지 않아요! 각 함수는 두 개의 숫자(`a`, `b`)를 받으니까, 그 숫자들을 <span class='font-bold text-teal-300'>산술 연산자(`+`, `-`, `*`, `/`)</span>로 계산해서 <span class='font-bold text-teal-300'>`return`</span> 키워드로 돌려주기만 하면 돼요. 예를 들어 `add` 함수는 `return a + b` 가 되겠죠?"
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 조언: 지식의 통합",
            "keyTakeaway": "프로그래밍은 배운 지식들을 연결하고 조합하여 실제 문제를 해결하는 과정입니다.",
            "sandboxCode": "# 변수 선언\nradius = 5\npi = 3.14\n\n# 원의 넓이 계산 (반지름 * 반지름 * 원주율)\narea = radius * radius * pi\n\n# 결과 출력\nprint(f\"반지름이 {radius}인 원의 넓이는 {area}입니다.\")",
            "sections": [
              {
                "heading": "핵심 조언",
                "text": "이번 미니 프로젝트는 새로운 개념보다는 지금까지 배운 변수 선언, 기본 자료형(숫자), 산술 연산자, 그리고 문자열 포맷팅(f-string)과 print 함수를 종합적으로 활용하는 연습입니다. 각 단계별로 필요한 도구를 떠올리고 조합하여 문제를 해결하는 개발자의 사고방식을 연습해보세요.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "첫 미니 프로젝트 성공!",
              "content": "<span class='font-bold text-green-300'>모든 계산 결과가 정확하고 출력 형식도 완벽하군요!</span> 배운 내용들을 잘 조합해서 첫 번째 미니 프로젝트를 성공적으로 완료했습니다. 훌륭합니다. 이런 경험들이 쌓여 더 복잡한 문제도 해결할 수 있게 될 겁니다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "디버깅 지원",
              "title": "계산식이나 출력을 확인해볼까요?",
              "content": "결과가 조금 다르네요. `num1`, `num2` 변수에 값을 제대로 입력했는지, 각 계산식(`+`, `-`, `*`, `/`)을 올바르게 작성했는지 확인해주세요. 마지막 출력 부분에서 f-string 형식이나 변수 이름에 오타가 있을 수도 있어요."
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "디버깅 지원",
              "title": "앗, 코드 실행 오류!",
              "content": "코드를 실행하는 중에 오류가 발생했어요. 변수 이름에 오타가 있거나, 정의되지 않은 변수를 사용하려고 한 건 아닐까요? print 함수 안에 f-string을 사용할 때 문법 오류가 있을 수도 있으니 꼼꼼하게 확인해보세요."
            }
          }
        }
      ]
    },
    {
      "week": 3,
      "title": "흐름 제어: 조건과 반복으로 똑똑한 코드 만들기",
      "cycles": [
        {
          "title": "조건에 따른 분기 (if-elif-else)",
          "syntax_key": "if_statement",
          "filename": "auth.py",
          "starterCode": "user_role = 'editor' # 이 값을 'admin', 'user' 등으로 바꿔 테스트해보세요.\n\n# TODO: 괄호 안에 user_role이 'admin'과 같은지(==) 비교하는 식을 넣으세요.\nif ( ):\n    # TODO: \"관리자님 환영합니다.\" 를 출력하는 print() 코드를 작성하세요.\n    \n# TODO: 괄호 안에 user_role이 'editor'와 같은지(==) 비교하는 식을 넣으세요.\nelif ( ):\n    # TODO: \"에디터님 안녕하세요.\" 를 출력하는 print() 코드를 작성하세요.\n    \n# TODO: 위 두 경우가 모두 아닐 때를 의미하는 else: 를 작성하세요.\n\n    # TODO: \"환영합니다.\" 를 출력하는 print() 코드를 작성하세요.\n    \n\nprint('Done') # 이 줄은 항상 실행됩니다.\n",
          "starterCode_adv": "# 아래 함수는 사용자 역할을 받아 적절한 환영 메시지를 반환합니다.\n# TODO: 함수 본문에서 if-elif-else 문을 완성하여 역할별 메시지를 반환하도록 수정하세요.\ndef get_welcome_message(role):\n    message = \"\"\n    if role == 'admin':\n        # 여기에 관리자 메시지를 반환하는 코드를 작성하세요.\n        return \"관리자님 환영합니다.\"\n    elif role == 'editor':\n        # 여기에 에디터 메시지를 반환하는 코드를 작성하세요.\n        return \"에디터님 안녕하세요.\"\n    else:\n        # 여기에 기본 메시지를 반환하는 코드를 작성하세요.\n        return \"환영합니다.\"\n    # return message # 이 줄은 더 이상 필요 없을 수 있습니다.\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nprint(get_welcome_message('admin'))\nprint(get_welcome_message('editor'))\nprint(get_welcome_message('user'))\n",
          "testCode": "import io; from contextlib import redirect_stdout; output_results = {}; roles_to_test = ['admin', 'editor', 'user']; base_code_lines = student_code.split('\\n'); for role in roles_to_test: f = io.StringIO(); code_to_run = f\"user_role = '{role}'\\n\" + '\\n'.join(line for line in base_code_lines if not line.strip().startswith('user_role =')); with redirect_stdout(f): exec(code_to_run); output_results[role] = f.getvalue().strip().split('\\n')[0]; assert output_results['admin'] == '관리자님 환영합니다.', 'admin 역할에 대한 출력이 올바르지 않습니다.'; assert output_results['editor'] == '에디터님 안녕하세요.', 'editor 역할에 대한 출력이 올바르지 않습니다.'; assert output_results['user'] == '환영합니다.', '기타 역할에 대한 출력이 올바르지 않습니다.'",
          "testCode_adv": "assert callable(get_welcome_message), 'get_welcome_message 함수가 정의되지 않았습니다.'; assert get_welcome_message('admin') == '관리자님 환영합니다.', \"admin 역할에 대한 반환값이 올바르지 않습니다.\"; assert get_welcome_message('editor') == '에디터님 안녕하세요.', \"editor 역할에 대한 반환값이 올바르지 않습니다.\"; assert get_welcome_message('user') == '환영합니다.', \"기타 역할에 대한 반환값이 올바르지 않습니다.\"; assert get_welcome_message('guest') == '환영합니다.', \"정의되지 않은 역할에 대한 반환값이 올바르지 않습니다.\"",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "사용자 역할별 접근 제어",
            "content": "보안 강화의 첫 단계입니다. `user_role` 변수의 값에 따라 다른 환영 메시지를 보여주는 기능을 구현해야 합니다. 역할이 <span class='font-bold text-yellow-300'>'admin'이면 '관리자님 환영합니다.'</span>를, <span class='font-bold text-yellow-300'>'editor'이면 '에디터님 안녕하세요.'</span>를, 그 외의 <span class='font-bold text-yellow-300'>모든 경우에는 '환영합니다.'</span>를 출력해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "역할 기반 환영 메시지 함수 완성",
            "content": "사용자 역할(`role`)에 따라 다른 환영 메시지를 반환하는 `get_welcome_message` 함수가 있습니다. 함수 내부의 <span class='font-bold text-yellow-300'>`if-elif-else` 조건문을 완성</span>하여, <span class='font-bold text-yellow-300'>'admin', 'editor', 그 외 역할</span>에 맞는 적절한 메시지를 반환하도록 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 OJT",
            "title": "갈림길 만들기: `if`",
            "content": "`if`문은 코드에 갈림길을 만들어줘요. '만약(if) 조건이 맞으면 여기로 가고, 아니고 만약(elif) 다른 조건이 맞으면 저기로, 그것도 아니면(else) 이리로 가!' 하는 식이죠. `starterCode`의 빈칸을 채워볼까요? 첫 `if` 옆 괄호 안에는 <span class='font-bold text-teal-300'>`user_role == 'admin'`</span>을, 다음 줄 빈칸에는 <span class='font-bold text-teal-300'>`print(\"관리자님 환영합니다.\")`</span>를 넣으세요. `elif`와 `else` 부분도 비슷하게 채우면 돼요! 조건 비교에는 <span class='font-bold text-teal-300'>`==` 기호</span>를, 각 줄 끝에는 <span class='font-bold text-teal-300'>콜론(`:`)</span>을, 실행할 코드는 <span class='font-bold text-teal-300'>들여쓰기</span>가 필요하다는 것도 기억하세요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "조건에 따라 다른 값 반환하기",
            "content": "함수 안에서도 조건문은 똑같이 써요. <span class='font-bold text-teal-300'>`if role == 'admin':` 다음 줄에는 `return \"관리자님 환영합니다.\"`</span> 처럼 값을 반환하면 함수가 바로 종료되죠. `elif`와 `else` 블록에도 각각 맞는 메시지를 `return` 하도록 채워주면 완성될 거예요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: if 조건문",
            "keyTakeaway": "`if`문은 조건의 참/거짓에 따라 프로그램의 실행 경로를 결정합니다.",
            "sandboxCode": "score = 85\n\nif score >= 90:\n    print(\"A 등급\")\nelif score >= 80:\n    print(\"B 등급\")\nelse:\n    print(\"C 등급\")",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "흐름 제어란 프로그램의 실행 순서를 제어하는 것을 말합니다[cite: 1386]. `if`문은 주어진 '조건(condition)'이 참(True)인지 거짓(False)인지에 따라 코드의 실행 흐름을 나누는 가장 기본적인 조건 분기문입니다 [cite: 1388-1389].",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "조건문 뒤에는 콜론(:)을, 실행할 코드는 들여쓰기를 해야 합니다[cite: 1434, 1438, 1443].",
                "code": "if 조건1:\n    # 조건1이 참일 때 실행할 코드\nelif 조건2:\n    # 조건1은 거짓이고, 조건2가 참일 때 실행할 코드\nelse:\n    # 위의 모든 조건이 거짓일 때 실행할 코드"
              },
              {
                "heading": "활용 사례",
                "text": "사용자가 입력한 ID/PW가 올바른지 확인, 점수에 따른 합격/불합격/재시험 결정 등 프로그램이 특정 상황을 '판단'해야 하는 모든 곳에 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "조건문 뒤에는 반드시 콜론(:)을 붙여야 하며, 각 조건에 따라 실행될 코드 블록은 반드시 '들여쓰기(indentation)'를 해야 합니다[cite: 1443]. `=`는 값을 할당하는 것이고, `==`가 값이 같은지 비교하는 것이니 헷갈리지 않도록 주의하세요[cite: 1277].",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "접근 제어 로직 구현 완료",
              "content": "<span class='font-bold text-green-300'>훌륭합니다.</span> 사용자 역할에 따라 정확히 다른 메시지가 출력되는군요. 이 `if`문은 앞으로 만들 거의 모든 기능의 기초가 될 겁니다. 잘 익혀두었어요."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "조건식이나 출력문을 확인해볼까요?",
              "content": "테스트 결과가 조금 다르네요. 각 `if`, `elif` 옆 괄호 안에 <span class='font-bold text-teal-300'>`user_role == '...'`</span> 비교식을 정확히 넣었나요? 따옴표나 `==` 기호를 빠뜨렸을 수도 있어요. 각 `print()` 함수 안의 메시지도 오타 없이 입력했는지 확인해주세요!"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 문법 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. `if`나 `elif`, `else` 뒤에 콜론(`:`)을 빠뜨리진 않았나요? 아니면 들여쓰기가 잘못되었을 수도 있어요. 파이썬은 들여쓰기에 아주 민감하거든요. 다시 한번 확인해주세요!"
            }
          }
        },
        {
          "title": "조건 기반 반복 (while)",
          "syntax_key": "while_loop",
          "filename": "monitor.py",
          "starterCode": "import time\ncount = 0\nmax_checks = 3\n\n# TODO: ':' 옆 빈칸에 count가 max_checks보다 작은 동안(<) 반복하는 조건을 넣으세요.\nwhile :\n    # 루프 안에서는:\n    # TODO: print() 안에 f-string을 사용하여 \"서버 상태 확인 중... (시도: {count+1})\" 메시지를 만드세요.\n    print()\n    \n    # TODO: '=' 오른쪽에 count 변수의 값을 1 증가시키는 식을 작성하세요. (예: count + 1)\n    count = \n    \n    time.sleep(0.1) # 1초 대기 (테스트를 위해 짧게 줄임)\n\n\nprint(\"최대 확인 횟수에 도달했습니다.\")\n",
          "starterCode_adv": "import time\n\n# 아래 함수는 특정 상태가 될 때까지 최대 횟수만큼 확인을 반복합니다.\n# TODO: 함수 본문에서 while 루프를 완성하세요.\n# 조건: checks < max_checks 이고, 현재 상태(current_status)가 target_status와 다른 동안\ndef wait_until(check_func, target_status, max_checks):\n    checks = 0\n    current_status = None # 초기 상태를 None 등으로 설정\n    while checks < max_checks and current_status != target_status: # 조건 수정 완료\n        current_status = check_func() # 가상의 상태 확인 함수 호출\n        print(f\"상태 확인({checks+1}/{max_checks}): {current_status}\")\n        if current_status == target_status:\n            print(\"목표 상태 도달!\")\n            return True\n        checks += 1\n        time.sleep(0.1) # 테스트 위해 짧게 설정\n    print(\"최대 확인 횟수 초과 또는 초기 상태 오류\") # 메시지 약간 수정\n    return False\n\n# --- 테스트용 가상 상태 확인 함수 --- (수정 불필요)\nstatus_list = ['booting', 'booting', 'running']\ncall_count = 0\ndef check_server_status():\n    global call_count\n    status = status_list[min(call_count, len(status_list) - 1)]\n    call_count += 1\n    return status\n# -------------------------------------\n\n# 함수 호출 (수정 불필요)\nwait_until(check_server_status, 'running', 5)\n",
          "testCode": "import io, time; from contextlib import redirect_stdout; f = io.StringIO(); student_locals = {}; with redirect_stdout(f): time_sleep_orig = time.sleep; time.sleep = lambda x: None; exec(student_code, student_locals); time.sleep = time_sleep_orig; output = f.getvalue().strip().split('\\n'); expected_lines = ['서버 상태 확인 중... (시도: 1)', '서버 상태 확인 중... (시도: 2)', '서버 상태 확인 중... (시도: 3)', '최대 확인 횟수에 도달했습니다.']; assert output == expected_lines, f'출력 결과가 다릅니다.\\n기대값:\\n{chr(10).join(expected_lines)}\\n실제값:\\n{chr(10).join(output)}'; assert 'count' in student_locals and student_locals['count'] == 3, f'루프 종료 후 count 변수 값은 3이어야 합니다. 실제값: {student_locals.get(\"count\")}'",
          "testCode_adv": "import io, time; from contextlib import redirect_stdout; f = io.StringIO(); global_scope = {}; local_scope = {}; with redirect_stdout(f): time_sleep_orig = time.sleep; time.sleep = lambda x: None; global_scope['call_count'] = 0; # call_count 초기화\n    global_scope['status_list'] = ['booting', 'booting', 'running']; exec(student_code, global_scope, local_scope); time.sleep = time_sleep_orig; output = f.getvalue().strip().split('\\n'); expected_lines = ['상태 확인(1/5): booting', '상태 확인(2/5): booting', '상태 확인(3/5): running', '목표 상태 도달!']; assert output == expected_lines, f'출력 결과가 다릅니다.\\n기대값:\\n{chr(10).join(expected_lines)}\\n실제값:\\n{chr(10).join(output)}'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "서버 상태 모니터링 (반복)",
            "content": "서버 상태를 확인하는 작업을 <span class='font-bold text-yellow-300'>최대 3번</span>까지만 반복하고 싶습니다. `while` 문을 사용하여 <span class='font-bold text-yellow-300'>시도 횟수(`count`)가 최대 횟수(`max_checks`)보다 작은 동안</span> \"서버 상태 확인 중... (시도: [횟수])\" 메시지를 출력하고, 1초 대기하는 스크립트를 작성해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "상태 확인 함수 개선",
            "content": "특정 상태가 될 때까지 기다리는 `wait_until` 함수가 있습니다. 현재 `while` 루프의 조건이 잘못 설정되어 있습니다. <span class='font-bold text-yellow-300'>확인 횟수(`checks`)가 최대 횟수(`max_checks`) 미만이고, 현재 상태(`current_status`)가 목표 상태(`target_status`)와 다른 동안</span>에만 루프가 계속 실행되도록 `while` 문의 조건을 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "`while`로 조건 따라 반복하기",
            "content": "`while`문은 특정 조건이 맞는 '동안' 계속 반복해요[cite: 1456]. `starterCode`를 볼까요? `while` 뒤 빈칸에는 반복할 조건 <span class='font-bold text-teal-300'>`count < max_checks`</span>를 넣으세요. 루프 안 `print()` 빈칸에는 f-string <span class='font-bold text-teal-300'>`f\"서버 상태 확인 중... (시도: {count+1})\"`</span>를, `count = ` 오른쪽 빈칸에는 <span class='font-bold text-teal-300'>`count + 1`</span>을 넣어 `count` 값을 1씩 증가시켜야 해요. 이걸 안 하면 무한 반복에 빠질 수 있으니 주의!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "두 가지 조건을 `while`에!",
            "content": "`while` 문에는 <span class='font-bold text-teal-300'>`and`</span> 키워드를 써서 여러 조건을 동시에 만족할 때만 반복하도록 만들 수 있어요 [cite: 1288-1291]. '횟수가 최대 횟수 미만' **그리고** '현재 상태가 목표 상태와 다름' 이 두 조건을 모두 만족하는 동안에만 반복하면 되겠죠? 각 조건은 비교 연산자 (`<`, `!=`)로 만들 수 있고요."
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: while 반복문",
            "keyTakeaway": "`while`문은 특정 조건이 참인 동안 코드를 계속 반복합니다.",
            "sandboxCode": "count = 5\nwhile count > 0:\n    print(f\"카운트 다운: {count}\")\n    count = count - 1 # 이 줄이 없으면 무한 루프에 빠져요!\nprint(\"발사!\")",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "`while`문은 주어진 '조건(condition)'이 참(True)인 '동안(while)' 코드 블록을 계속해서 반복 실행합니다[cite: 1453, 1456]. 조건이 거짓(False)이 되면 반복을 멈추고 다음 코드로 넘어갑니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "조건문 뒤에 콜론(:)을, 반복할 코드는 들여쓰기를 해야 합니다 [cite: 1491-1493].",
                "code": "while 조건:\n    # 조건이 참인 동안 반복해서 실행할 코드"
              },
              {
                "heading": "활용 사례",
                "text": "사용자가 올바른 값을 입력할 때까지 계속 재입력 받기, 게임에서 플레이어의 체력이 0보다 클 동안 계속 게임 진행하기, 특정 횟수만큼 반복하기 등 특정 조건 하에 반복이 필요할 때 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "가장 주의할 점은 '무한 루프'입니다. `while`문의 조건이 항상 참(True)으로 유지되면 프로그램이 멈추지 않고 영원히 반복합니다[cite: 1497]. 루프 내에서 조건을 변경하는 코드(예: `count = count + 1`)가 반드시 포함되어야 합니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "반복 제어 성공",
              "content": "좋습니다. 정확히 원하는 횟수만큼 반복하고 멈추는군요. / 함수가 올바른 조건에서 멈추는 것을 확인했습니다. <span class='font-bold text-green-300'>`while`문을 이용한 반복 제어를 잘 이해하고 있습니다.</span>"
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "반복 조건이나 내부 코드를 확인해볼까요?",
              "content": "반복 결과나 출력이 조금 이상해요. `while` 뒤에 조건 <span class='font-bold text-teal-300'>`count < max_checks`</span>를 정확히 넣었나요? 루프 안에서 `print()`의 f-string 내용이나, `count = count + 1` 부분을 제대로 작성했는지 다시 확인해주세요. `count`를 증가시키는 코드가 없으면 무한 루프에 빠질 수 있어요!"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 무한 루프 또는 오류!",
              "content": "코드가 끝나지 않거나 오류가 발생했어요! `while` 루프 조건을 다시 확인해보세요. 조건이 항상 참이 되거나, 루프 내부에서 사용하는 변수 이름에 오타가 있을 수 있어요."
            }
          }
        },
        {
          "title": "순회 반복 (for)",
          "syntax_key": "for_loop",
          "filename": "broadcast.py",
          "starterCode": "server_list = ['server-alpha', 'server-beta', 'server-gamma']\n\n# TODO: `for` 루프를 사용하여 server_list의 각 항목을 순회하며 출력하세요.\n#       `for ??? in ???:` 빈칸에 알맞은 변수 이름과 리스트 이름을 넣으세요.\nfor  in :\n    # TODO: `print()` 괄호 안에 루프에서 사용할 변수 이름을 넣으세요.\n    print()\n",
          "starterCode_adv": "# 아래 함수는 서버 목록을 받아 각 서버에 알림 메시지를 보내는 시뮬레이션입니다.\n# TODO: 함수 본문에서 for 루프를 완성하여 목록의 각 서버 이름을 출력하도록 수정하세요.\ndef send_notifications(servers):\n    print(\"알림 발송 시작...\")\n    # 여기에 for 루프를 작성하여 servers 리스트의 각 항목(server_name)을 순회하며 출력하세요.\n    for server_name in servers:\n        print(server_name)\n    print(\"...알림 발송 완료\")\n\n# 함수 호출 (수정 불필요)\nserver_list = ['server-alpha', 'server-beta', 'server-gamma']\nsend_notifications(server_list)\n",
          "testCode": "import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): exec(student_code); output = f.getvalue().strip().split('\\n'); expected = ['server-alpha', 'server-beta', 'server-gamma']; assert output == expected, f'출력 결과가 다릅니다.\\n기대값:\\n{chr(10).join(expected)}\\n실제값:\\n{chr(10).join(output)}'",
          "testCode_adv": "import io; from contextlib import redirect_stdout; assert callable(send_notifications), 'send_notifications 함수가 정의되지 않았습니다.'; f = io.StringIO(); server_list = ['server-alpha', 'server-beta', 'server-gamma']; with redirect_stdout(f): send_notifications(server_list); output = f.getvalue().strip().split('\\n'); expected = ['알림 발송 시작...', 'server-alpha', 'server-beta', 'server-gamma', '...알림 발송 완료']; assert output == expected, f'출력 결과가 다릅니다.\\n기대값:\\n{chr(10).join(expected)}\\n실제값:\\n{chr(10).join(output)}'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "전체 서버 목록 확인",
            "content": "관리 중인 <span class='font-bold text-yellow-300'>서버 목록(`server_list`)</span>에 있는 모든 서버 이름을 화면에 하나씩 출력해야 합니다. <span class='font-bold text-yellow-300'>`for` 반복문</span>을 사용하여 리스트의 모든 항목을 순서대로 출력하는 스크립트를 작성해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "알림 발송 함수 완성",
            "content": "서버 목록을 받아 알림을 보내는 `send_notifications` 함수가 있습니다. 함수 내부의 <span class='font-bold text-yellow-300'>`for` 루프 부분을 완성</span>하여, 입력받은 `servers` 리스트의 <span class='font-bold text-yellow-300'>각 서버 이름을 순서대로 출력</span>하도록 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "목록 훑어보기: `for`",
            "content": "리스트 같은 목록의 항목을 하나씩 꺼내볼 땐 <span class='font-bold text-teal-300'>`for` 반복문</span>이 정말 편해요! `starterCode`를 볼까요? <span class='font-bold text-teal-300'>`for server_name in server_list:`</span> 처럼 빈칸을 채워보세요. `server_name`은 각 항목을 담을 임시 이름표고, `server_list`는 우리가 훑어볼 목록이죠. 루프 안 `print()` 빈칸에는 임시 이름표인 <span class='font-bold text-teal-300'>`server_name`</span>을 넣으면 각 서버 이름이 순서대로 출력될 거예요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서도 `for`문!",
            "content": "함수 안에서도 <span class='font-bold text-teal-300'>`for` 반복문</span>을 똑같이 쓸 수 있어요! 함수가 매개변수로 받은 `servers` 리스트를 `for server_name in servers:` 처럼 순회하면서, 루프 안에서 `server_name` 변수를 출력해주면 각 서버 이름이 순서대로 나올 거예요."
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: for 반복문",
            "keyTakeaway": "`for`문은 리스트와 같은 데이터 묶음의 모든 항목을 하나씩 순회하며 반복합니다.",
            "sandboxCode": "fruits = [\"사과\", \"바나나\", \"딸기\"]\nfor fruit in fruits:\n    print(f\"{fruit} 맛있어요!\")",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "`for`문은 리스트, 튜플, 문자열과 같은 '순회 가능한(iterable)' 데이터 구조의 각 항목(item)을 처음부터 끝까지 차례대로 하나씩 꺼내어 코드 블록을 반복 실행합니다 [cite: 1502-1503].",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "`range()` 함수와 함께 사용하면 특정 횟수만큼 반복하는 코드를 쉽게 작성할 수 있습니다 [cite: 1516-1517].",
                "code": "# 리스트의 각 항목에 대해 반복\nfor 변수 in 리스트:\n    # 반복 실행할 코드\n\n# range() 함수와 함께 사용하기\nfor i in range(5): # 0부터 4까지 5번 반복\n    print(i)"
              },
              {
                "heading": "활용 사례",
                "text": "사용자 목록 전체에 이메일 보내기, 파일의 모든 줄을 한 줄씩 읽어서 처리하기, 특정 횟수만큼 작업 반복하기 등 정해진 범위나 목록을 순회할 때 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "`while`은 조건 기반, `for`는 순회 기반이라는 차이점을 이해하는 것이 중요합니다. `for`문과 함께 자주 사용되는 `range(n)` 함수는 0부터 n-1까지의 숫자를 만들어냅니다 [cite: 1533-1534].",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "목록 처리 완료",
              "content": "완벽합니다. 리스트에 있는 모든 서버 이름이 정확히 출력되었네요. / 함수가 모든 서버 이름을 올바르게 출력했습니다. <span class='font-bold text-green-300'>`for`문을 이용한 순회 방법을 잘 이해했습니다.</span> 반복적인 작업을 효율적으로 처리하는 중요한 기술입니다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "for문 구문이나 변수 이름을 확인해볼까요?",
              "content": "출력 결과가 조금 다르네요. <span class='font-bold text-teal-300'>`for server_name in server_list:`</span> 처럼 `for`, `in`, `:`을 정확히 사용했나요? 루프 안에서 `print()` 괄호 안에 <span class='font-bold text-teal-300'>`server_name`</span> 변수 이름을 올바르게 넣었는지도 확인해주세요!"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, for문 문법 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. `for ... in ...:` 구문은 정확하게 작성하셨나요? `in`을 빠뜨리거나, 맨 끝에 콜론(`:`)을 잊어버리는 실수를 자주 하곤 해요. 들여쓰기도 다시 한번 확인해보세요!"
            }
          }
        }
      ]
    }
  ]
}
